# Build Docker php page image.
# Triggered on push to main branch and pull requests to main branch.
name: Build and Deploy PHP Image

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code.
      - name: Checkout code
        uses: actions/checkout@v2

      # Login to Dockerhub.
      - name: Login to Dockerhub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Build and push the Docker image.
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/phpwebpage:${{ steps.vars.outputs.tag }} , ${{ secrets.DOCKER_HUB_USERNAME }}/phpwebpage:latest
          #tags: macrosolid/phpwebpage:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
  
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-output: json

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Deploy php_service and php_deployment
        uses: kodermax/kubectl-aws-eks@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG64 }}
        with:
          args: |
            apply -f php_service.yaml
            sleep 10
            kubectl apply -f php_deployment.yaml
            sleep 10
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.7.0/deploy/static/provider/cloud/deploy.yaml
            sleep 10
            kubectl wait --namespace ingress-nginx --for=condition=ready pod  --selector=app.kubernetes.io/component=controller --timeout=120s
            sleep 10
            kubectl apply -f php_ingress.yaml


      # # Install and configure ArgoCD CLI.
      # - name: Install and configure ArgoCD CLI
      #   run: |
      #     curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.1.2/argocd-linux-amd64
      #     chmod +x /usr/local/bin/argocd
      #     argocd login --insecure --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --grpc-web ${{ secrets.ARGOCD_SERVER }}

      # # Install Helm.
      # - name: Install Helm
      #   run: |
      #     curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # # Deploy the Helm chart using ArgoCD.
      # - name: Deploy Helm chart using ArgoCD
      #   run: |
      #     helm upgrade --install djangoproject ./helm-chart --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/djangoproject,image.tag=${{ github.sha }},replicaCount=2
      #     argocd app sync djangoproject