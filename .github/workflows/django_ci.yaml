# Build Docker Django project with postgresql
# Triggered on tags push origin main vX.X.X or pull_request in main
name: Build and Deploy Django project Images

on:
  workflow_dispatch:
  push:
    branches:
      - '!main'
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # Checkout the code.
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Docker meta
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUBIMAGE }}

  #     - name: Login to DockerHub
  #       if: github.event_name != 'push tag'
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Build and push Django
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: djangofiles/
  #         push: ${{ github.event_name != 'push tag' }}
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}

  #     - name: Docker meta for DB
  #       id: metadb
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUBIMAGEDB }}

  #     - name: Build and push postgresql
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: postgresqlfiles/
  #         push: ${{ github.event_name != 'push tag' }}
  #         tags: ${{ steps.metadb.outputs.tags }}
  #         labels: ${{ steps.metadb.outputs.labels }}
        
  deploy:
    runs-on: ubuntu-latest
    # needs: build
    steps:
      # Checkout the code.
      - name: Checkout code
        uses: actions/checkout@v2

      # Configure AWS credentials.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          aws-output: json

      # - name: Deploy Django service with Postgres
      #   uses: kodermax/kubectl-aws-eks@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG64 }}
      #   with:
      #     args: |
      #       apply -f postgres_pv.yaml  # Persistence volume for Postgresql.
      #       sleep 10
      #       kubectl apply -f postgres_pvc.yaml  # Persistence Volume Claim forPostreSQL pods.
      #       sleep 10
      #       kubectl apply -f postgres_deployment.yaml  # PostgreSQL Service and Deployment.
      #       sleep 10
      #       kubectl apply -f django_deployment.yaml  # Service and deployment of Djangoservice with LoadBalancer publication

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.4
        with:
          # aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          # aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          namespace: prometheus
          chart-repository: https://prometheus-community.github.io/helm-charts/
          args: |
            helm version 
            sleep 10
            helm install prometheus prometheus-community/prometheus --values prometheus_values.yaml
          # cluster-name: dm-diploma-eks-cluster.us-east-1.eksctl.io
          # # cluster-role-arn: ${{ secrets.AWS_ROLE_ARN }}
          # # config-files: fluent-bit/prod/values.yaml
          # chart-path: prometheus-community/prometheus
          # namespace: prometheus
          # name: prometheus
          # chart-repository: https://prometheus-community.github.io/helm-charts/
          # # version: 0.20.6
          # # atomic: true
 