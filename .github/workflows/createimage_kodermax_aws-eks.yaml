# Build Docker php page image.
# Triggered on push to main branch and pull requests to main branch.
name: Build and Deploy Django project Images

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - 'main'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code.
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUBIMAGE }}

      - name: Login to DockerHub
        if: github.event_name != 'push tag'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Django
        uses: docker/build-push-action@v4
        with:
          context: djangofiles/
          push: ${{ github.event_name != 'push tag' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Docker meta for DB
        id: metadb
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUBIMAGEDB }}

      - name: Build and push postgresql
        uses: docker/build-push-action@v4
        with:
          context: postgresqlfiles/
          push: ${{ github.event_name != 'push tag' }}
          tags: ${{ steps.metadb.outputs.tags }}
          labels: ${{ steps.metadb.outputs.labels }}
        
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     # Checkout the code.
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     # Configure AWS credentials.
  #     - name: Configure AWS credentials
  #       uses: aws-actions/configure-aws-credentials@v1
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-region: us-east-1
  #         aws-output: json


      # # Install and configure ArgoCD CLI.
      # - name: Install and configure ArgoCD CLI
      #   run: |
      #     curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/v2.1.2/argocd-linux-amd64
      #     chmod +x /usr/local/bin/argocd
      #     argocd login --insecure --username ${{ secrets.ARGOCD_USERNAME }} --password ${{ secrets.ARGOCD_PASSWORD }} --grpc-web ${{ secrets.ARGOCD_SERVER }}

      # # Install Helm.
      # - name: Install Helm
      #   run: |
      #     curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      # # Deploy the Helm chart using ArgoCD.
      # - name: Deploy Helm chart using ArgoCD
      #   run: |
      #     helm upgrade --install djangoproject ./helm-chart --set image.repository=${{ secrets.DOCKER_HUB_USERNAME }}/djangoproject,image.tag=${{ github.sha }},replicaCount=2
      #     argocd app sync djangoproject


      # - name: Deploy php_service and php_deployment
      #   uses: kodermax/kubectl-aws-eks@master
      #   env:
      #     KUBE_CONFIG_DATA: ${{ secrets.KUBECONFIG64 }}
      #   with:
      #     args: |
      #       apply -f php_service.yaml
      #       sleep 10
      #       kubectl apply -f php_deployment.yaml
      #       sleep 10
      #       kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.7.0/deploy/static/provider/cloud/deploy.yaml
      #       sleep 10
      #       kubectl wait --namespace ingress-nginx --for=condition=ready pod  --selector=app.kubernetes.io/component=controller --timeout=120s
      #       sleep 10
      #       kubectl apply -f php_ingress.yaml

